{"version":3,"sources":["components/NavigationBar.jsx","components/DescriptionForm.jsx","components/ApplicationForm.jsx","components/ConfigurationForm.jsx","components/ReviewPanel.jsx","components/TabContainer.jsx","App.js","index.js"],"names":["NavigationBar","Navbar","bg","variant","className","href","DescriptionForm","props","sampleContext","useContext","SampleContext","useState","Title","Level","Client","Service","Endpoint","Provider","RepositoryUrl","description","setDescription","handleChange","e","target","id","value","Form","onSubmit","preventDefault","setSample","sample","Sample","handleNext","Group","controlId","Label","Control","type","placeholder","onChange","required","Text","as","size","custom","Button","ApplicationForm","apps","setApps","appForm","addNewStep","appIndex","propertyName","newApps","push","sectionIndex","isNaN","split","i","Check","label","RequiredResourcesAccess","length","map","resource","index","disabled","selected","some","app","Kind","find","Id","onClick","SecurityGroups","concat","group","AppRoles","role","ManualSteps","step","AADApps","Name","Audience","HomePage","ReplyUrls","LogoutUrl","PasswordCredentials","GroupMembershipClaims","UsesROPCOrIWA","AllowImplicitFlow","ConfigurationForm","configs","setConfigs","configForm","useEffect","App","SettingKind","SettingFile","Mappings","newConfigs","defaultValue","mapping","iid","addMappings","CodeConfiguration","ReviewPanel","validatedFields","sanitizeFields","object","JSON","parse","stringify","key","config","validateFields","data","encodeURIComponent","download","TabContainer","setKey","Tabs","activeKey","onSelect","k","transition","Tab","eventKey","title","createContext","stateObject","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e8f87b93.chunk.js","sourcesContent":["import { Navbar } from \"react-bootstrap\";\n\nexport const NavigationBar = () => {\n\n    return (\n        <>\n            <Navbar bg=\"primary\" variant=\"dark\">\n                <a className=\"navbar-brand\" href=\"/\">GenerateScriptsForSample</a>\n            </Navbar>\n        </>\n    );\n};","import { useContext, useState } from 'react';\nimport { Form, Button } from \"react-bootstrap\";\n\nimport { SampleContext } from '../App';\n\nexport const DescriptionForm = (props) => {\n\n    const sampleContext = useContext(SampleContext);\n\n    const [description, setDescription] = useState({\n        Title: \"\",\n        Level: \"100\", // default\n        Client: \"\",\n        Service: \"\",\n        Endpoint: \"v2\", // default\n        Provider: \"AAD\", // default\n        RepositoryUrl: \"\",\n    });\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        // update the state\n        sampleContext.setSample({\n            ...sampleContext.sample,\n            Sample: description\n        });\n        \n        // move to the next form\n        props.handleNext(\"apps\");\n    }\n\n    const handleChange = (e) => {\n        setDescription({\n            ...description,\n            [e.target.id]: e.target.value\n        });\n    }\n\n    return (\n        <>\n            <Form onSubmit={handleSubmit}>\n                <Form.Group className=\"mb-3\" controlId=\"Title\">\n                    <Form.Label>Title</Form.Label>\n                    <Form.Control type=\"text\" placeholder=\"Enter a title\" onChange={handleChange} required/>\n                    <Form.Text className=\"text-muted\">\n                        Enter a descriptive title for the sample.\n                    </Form.Text>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\" controlId=\"Level\">\n                    <Form.Label>Level</Form.Label>\n                    <Form.Control className=\"mx-2\" as=\"select\" size=\"lg\" onChange={handleChange} custom required>\n                        <option>100</option>\n                        <option>200</option>\n                        <option>300</option>\n                        <option>400</option>\n                    </Form.Control>\n                    <Form.Text className=\"text-muted\">\n                        Select a level appropriate for the sample.\n                    </Form.Text>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\" controlId=\"Client\">\n                    <Form.Label>Client</Form.Label>\n                    <Form.Control type=\"text\" placeholder=\"Enter a title\" onChange={handleChange} />\n                    <Form.Text className=\"text-muted\">\n                        Enter a descriptive title for the client component.\n                    </Form.Text>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\" controlId=\"Service\">\n                    <Form.Label>Service</Form.Label>\n                    <Form.Control type=\"text\" placeholder=\"Enter a title\" onChange={handleChange} />\n                    <Form.Text className=\"text-muted\">\n                        Enter a descriptive title for the service component (if any).\n                    </Form.Text>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\" controlId=\"RepositoryUrl\">\n                    <Form.Label>Repository URL</Form.Label>\n                    <Form.Control type=\"text\" placeholder=\"Enter a title\" onChange={handleChange} required/>\n                    <Form.Text className=\"text-muted\">\n                        Enter a descriptive title for the sample.\n                    </Form.Text>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\" controlId=\"Endpoint\">\n                    <Form.Label>Endpoint</Form.Label>\n                    <Form.Control className=\"mx-2\" as=\"select\" size=\"lg\" onChange={handleChange} custom required>\n                        <option>v2</option>\n                        <option>v1</option>\n                    </Form.Control>\n                    <Form.Text className=\"text-muted\">\n                        Select the Microsoft identity platform endpoint version.\n                    </Form.Text>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\" controlId=\"Provider\">\n                    <Form.Label>Provider</Form.Label>\n                    <Form.Control className=\"mx-2\" as=\"select\" size=\"lg\" onChange={handleChange} custom required>\n                        <option>AAD</option>\n                        <option>B2C</option>\n                    </Form.Control>\n                    <Form.Text className=\"text-muted\">\n                        Select a provider.\n                    </Form.Text>\n                </Form.Group>\n\n                <Button variant=\"primary\" type=\"submit\">\n                    Next\n                </Button>\n            </Form>\n        </>\n    );\n};","import { useContext, useState } from 'react';\nimport { Form, Button } from \"react-bootstrap\";\n\nimport { SampleContext } from '../App';\n\nexport const ApplicationForm = (props) => {\n\n    const sampleContext = useContext(SampleContext);\n    const [apps, setApps] = useState([]); // number of apps submitted\n    const appForm = []; // array of form elements\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        // update the state\n        sampleContext.setSample({\n            ...sampleContext.sample,\n            AADApps: apps,\n        });\n\n        // move to the next form\n        props.handleNext(\"config\");\n    }\n\n    const addApplication = () => {\n        setApps([\n            ...apps,\n            {\n                Id: \"\",\n                Name: \"\",\n                Kind: \"WebApp\", // default\n                Audience: \"AzureADMyOrg\", // default\n                HomePage: \"\",\n                ReplyUrls: \"\",\n                LogoutUrl: \"\",\n                PasswordCredentials: \"None\", // default\n                GroupMembershipClaims: \"None\", // default\n                UsesROPCOrIWA: false, // default\n                AllowImplicitFlow: false, // default\n                RequiredResourcesAccess: [],\n                SecurityGroups: [],\n                AppRoles: [],\n                ManualSteps: []\n            }\n        ]);\n    }\n\n    const addNewStep = (appIndex, propertyName) => {\n        const newApps = [...apps];\n        newApps[appIndex][propertyName].push({});\n        setApps(newApps);\n    }\n\n    const handleChange = (appIndex, sectionIndex) => (e) => {\n        if (isNaN(e.target.id.split(\"-\")[1])) {\n            const newApps = [...apps];\n            newApps[appIndex][e.target.id.split(\"-\")[0]][sectionIndex][e.target.id.split(\"-\")[1]] = e.target.value;\n            setApps(newApps);\n        } else {\n            const newApps = [...apps];\n            newApps[appIndex][e.target.id.split(\"-\")[0]] = e.target.value;\n            setApps(newApps);\n        }\n    }\n\n    for (let i = 0; i < apps.length; i++) {\n        appForm.push(\n            <div id={\"app-\" + i} key={\"app-\" + i}>\n                <Form.Group className=\"mb-3\" controlId={\"Id-\" + i}>\n                    <Form.Label>Id</Form.Label>\n                    <Form.Control type=\"text\" placeholder=\"Enter an Id\" onChange={handleChange(i)} required/>\n                    <Form.Text className=\"text-muted\">\n                        Enter a descriptive id for the application.\n                    </Form.Text>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\" controlId={\"Name-\" + i}>\n                    <Form.Label>Name</Form.Label>\n                    <Form.Control type=\"text\" placeholder=\"Enter a name\" onChange={handleChange(i)} required/>\n                    <Form.Text className=\"text-muted\">\n                        Enter a descriptive name for the application.\n                    </Form.Text>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\" controlId={\"Kind-\" + i}>\n                    <Form.Label>Kind</Form.Label>\n                    <Form.Control className=\"mx-2\" as=\"select\" size=\"lg\" onChange={handleChange(i)} custom>\n                        <option>WebApp</option>\n                        <option>WebApi</option>\n                        <option>Desktop</option>\n                        <option>SinglePageApplication</option>\n                    </Form.Control>\n                    <Form.Text className=\"text-muted\">\n                        Select the kind of the application.\n                    </Form.Text>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\" controlId={\"Audience-\" + i}>\n                    <Form.Label>Audience</Form.Label>\n                    <Form.Control className=\"mx-2\" as=\"select\" size=\"lg\" onChange={handleChange(i)} custom>\n                        <option>AzureADMyOrg</option>\n                        <option>AzureADMultipleOrgs</option>\n                        <option>AzureADandPersonalMicrosoftAccount</option>\n                        <option>PersonalMicrosoftAccount</option>\n                    </Form.Control>\n                    <Form.Text className=\"text-muted\">\n                        Select the audience of the application.\n                    </Form.Text>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\" controlId={\"HomePage-\" + i}>\n                    <Form.Label>Homepage</Form.Label>\n                    <Form.Control type=\"text\" placeholder=\"Enter the homepage (if any)\" onChange={handleChange(i)} />\n                    <Form.Text className=\"text-muted\">\n                        Enter the homepage of the application.\n                    </Form.Text>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\" controlId={\"ReplyUrls-\" + i}>\n                    <Form.Label>ReplyUrls</Form.Label>\n                    <Form.Control type=\"text\" placeholder=\"Enter the reply url (if any)\" onChange={handleChange(i)} />\n                    <Form.Text className=\"text-muted\">\n                        Enter the reply url(s) for the application. If more than one, separate them with a blank space.\n                    </Form.Text>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\" controlId={\"LogoutUrl-\" + i}>\n                    <Form.Label>LogoutUrl</Form.Label>\n                    <Form.Control type=\"text\" placeholder=\"Enter the logout url (if any)\" onChange={handleChange(i)} />\n                    <Form.Text className=\"text-muted\">\n                        Enter the logout URL of the application.\n                    </Form.Text>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\" controlId={\"PasswordCredentials-\" + i}>\n                    <Form.Check type=\"checkbox\" label=\"PasswordCredentials\" onChange={handleChange(i)} value={\"Auto\"} />\n                </Form.Group>\n                \n                <Form.Group className=\"mb-3\" controlId={\"AllowImplicitFlow-\" + i}>\n                    <Form.Check type=\"checkbox\" label=\"AllowImplicitFlow\" onChange={handleChange(i)} value={true} />\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\" controlId={\"UsesROPCOrIWA-\" + i}>\n                    <Form.Check type=\"checkbox\" label=\"UsesROPCOrIWA\" onChange={handleChange(i)} value={true} />\n                </Form.Group>\n            \n                { apps[i].RequiredResourcesAccess.length > 0 ? apps[i].RequiredResourcesAccess.map((resource, index) => {\n                        return (\n                            <div id={\"RequiredResourcesAccess-\" + index} key={\"RequiredResourcesAccess-\" + index}>\n                                <Form.Group className=\"mb-3\" controlId={\"RequiredResourcesAccess-Resource\"}>\n                                    <Form.Label>Resource</Form.Label>\n                                    <Form.Control className=\"mx-2\" as=\"select\" size=\"lg\" onChange={handleChange(i, index)} custom required>\n                                        <option disabled selected></option>\n                                        <option>Microsoft Graph</option>\n                                        <option>Windows Azure Service Management API</option>\n                                        { apps.some((app) => app.Kind === \"WebApi\") ? <option>{apps.find((app) => app.Kind === \"WebApi\").Id}</option> : null}\n                                    </Form.Control>\n                                    <Form.Text className=\"text-muted\">\n                                        Select the resource.\n                                    </Form.Text>\n                                </Form.Group>\n\n                                <Form.Group className=\"mb-3\" controlId={\"RequiredResourcesAccess-DelegatedPermissions\"}>\n                                    <Form.Label>Delegated Permissions</Form.Label>\n                                    <Form.Control type=\"text\" placeholder=\"Enter the scopes\" onChange={handleChange(i, index)} />\n                                    <Form.Text className=\"text-muted\">\n                                        Enter the name of the permissions. If more than one, separate them with a blank space.\n                                    </Form.Text>\n                                </Form.Group>\n                            </div>\n                        );\n                    }) : null }\n    \n                <Button variant=\"primary\" onClick={() => addNewStep(i, \"RequiredResourcesAccess\")}>\n                    Add a resource\n                </Button>\n\n                { apps[i].SecurityGroups.length > 0 ?\n                 [<div key={\"GroupMembershipClaims-\" + i}>\n                    <Form.Group className=\"mb-3\" controlId={\"GroupMembershipClaims-\" + i}>\n                        <Form.Label>Group Membership Claims</Form.Label>\n                        <Form.Control className=\"mx-2\" as=\"select\" size=\"lg\" onChange={handleChange(i)} custom>\n                            <option>None</option>\n                            <option>Security Group</option>\n                            <option>ApplicationGroup</option>\n                            <option>DirectoryRole</option>\n                            <option>All</option>\n                        </Form.Control>\n                        <Form.Text className=\"text-muted\">\n                            Select the group membership type for the application.\n                        </Form.Text>\n                    </Form.Group>\n                 </div>\n                 ].concat(apps[i].SecurityGroups.map((group, index) => {\n                    return (\n                        <div id={\"SecurityGroups-\" + index} key={\"SecurityGroups-\" + index}>\n                            <Form.Group className=\"mb-3\" controlId={\"SecurityGroups-Name\"}>\n                                <Form.Label>Name</Form.Label>\n                                <Form.Control type=\"text\" placeholder=\"Enter the name of the group\" onChange={handleChange(i, index)} />\n                                <Form.Text className=\"text-muted\">\n                                    Enter the name of the group.\n                                </Form.Text>\n                            </Form.Group>\n\n                            <Form.Group className=\"mb-3\" controlId={\"SecurityGroups-Description\"}>\n                                <Form.Label>Description</Form.Label>\n                                <Form.Control type=\"text\" placeholder=\"Enter a description for the group\" onChange={handleChange(i, index)} />\n                                <Form.Text className=\"text-muted\">\n                                    Enter a description for the group.\n                                </Form.Text>\n                            </Form.Group>\n                        </div>\n                    );\n                }))\n                     : null }\n\n                <Button variant=\"primary\" onClick={() => addNewStep(i, \"SecurityGroups\")}>\n                    Add a group\n                </Button>\n\n                { apps[i].AppRoles.length > 0 ? apps[i].AppRoles.map((role, index) => {\n                        return (\n                            <div id={\"AppRoles-\" + index} key={\"AppRoles-\" + index}>\n                                <Form.Group className=\"mb-3\" controlId={\"AppRoles-Types\"}>\n                                    <Form.Label>Type</Form.Label>\n                                    <Form.Control className=\"mx-2\" as=\"select\" size=\"lg\" onChange={handleChange(i, index)} custom required>\n                                        <option disabled selected></option>\n                                        <option>App</option>\n                                        <option>User</option>\n                                    </Form.Control>\n                                    <Form.Text className=\"text-muted\">\n                                        Select the type of the role.\n                                    </Form.Text>\n                                </Form.Group>\n\n                                <Form.Group className=\"mb-3\" controlId={\"AppRoles-Name\"}>\n                                    <Form.Label>Name</Form.Label>\n                                    <Form.Control type=\"text\" placeholder=\"Enter a name for the role\" onChange={handleChange(i, index)} />\n                                    <Form.Text className=\"text-muted\">\n                                        Enter a name for the role.\n                                    </Form.Text>\n                                </Form.Group>\n\n                                <Form.Group className=\"mb-3\" controlId={\"AppRoles-Description\"}>\n                                    <Form.Label>Description</Form.Label>\n                                    <Form.Control type=\"text\" placeholder=\"Enter the description for the role\" onChange={handleChange(i, index)} />\n                                    <Form.Text className=\"text-muted\">\n                                        Enter the description for the role.\n                                    </Form.Text>\n                                </Form.Group>\n                            </div>\n                        );\n                    }) : null }\n\n                <Button variant=\"primary\" onClick={() => addNewStep(i, \"AppRoles\")}>\n                    Add a role\n                </Button>\n\n                { apps[i].ManualSteps.length > 0 ? apps[i].ManualSteps.map((step, index) => {\n                        return (\n                            <div id={\"ManualSteps-\" + index} key={\"ManualSteps-\" + index}>\n                                <Form.Group className=\"mb-3\" controlId={\"ManualSteps-Comment\"}>\n                                    <Form.Label>Comment</Form.Label>\n                                    <Form.Control type=\"text\" placeholder=\"Describe the manual step\" onChange={handleChange(i, index)} />\n                                    <Form.Text className=\"text-muted\">\n                                        Describe the manual step.\n                                    </Form.Text>\n                                </Form.Group>\n                            </div>\n                        );\n                    }) : null }\n\n                <Button variant=\"primary\" onClick={() => addNewStep(i, \"ManualSteps\")}>\n                    Add a manual step\n                </Button>\n                <hr />\n            </div>\n        )\n    }\n\n    return (\n        <>\n            <Form onSubmit={handleSubmit}>\n                {appForm}\n                <Button variant=\"primary\" onClick={addApplication}>\n                    Add Application\n                </Button>\n                <br />\n                {\n                    appForm.length > 0 ? \n                        <Button variant=\"primary\" type=\"submit\">\n                            Next\n                        </Button>\n                    :\n                        null\n                }\n            </Form>\n        </>\n    );\n};","import { useContext, useState, useEffect } from 'react';\nimport { Form, Button } from \"react-bootstrap\";\n\nimport { SampleContext } from '../App';\n\nexport const ConfigurationForm = (props) => {\n\n    const sampleContext = useContext(SampleContext);\n    const [configs, setConfigs] = useState([]);\n    const configForm = []; // array of form elements\n\n    // initialize the mappings object on component load\n    useEffect(() => {\n        const configs = [];\n\n        for (const app of sampleContext.sample.AADApps) {\n            configs.push({\n                App: app.Id,\n                SettingKind: \"JSON\", // default\n                SettingFile: \"\",\n                Mappings: []\n            });\n        }\n\n        setConfigs(configs);\n\n    }, [sampleContext.sample.AADApps]);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        // update the state\n        sampleContext.setSample({\n            ...sampleContext.sample,\n            CodeConfiguration: configs,\n        });\n\n        // move to the next form\n        props.handleNext(\"review\");\n    }\n\n    const addMappings = (appIndex) => {\n        const newConfigs = [...configs];\n        newConfigs[appIndex][\"Mappings\"].push({});\n        setConfigs(newConfigs);\n    }\n\n    const handleChange = (appIndex, sectionIndex) => (e) => {\n        if (isNaN(e.target.id.split(\"-\")[1])) {\n            const newConfigs = [...configs];\n            newConfigs[appIndex][e.target.id.split(\"-\")[0]][sectionIndex][e.target.id.split(\"-\")[1]] = e.target.value;\n            setConfigs(newConfigs);\n        } else {\n            const newConfigs = [...configs];\n            newConfigs[appIndex][e.target.id.split(\"-\")[0]] = e.target.value;\n            setConfigs(newConfigs);\n        }\n    }\n\n    for (let i = 0; i < sampleContext.sample.AADApps.length; i++) {\n        configForm.push(\n            <div id={\"config-\" + i} key={\"config-\" + i}>\n                <Form.Group className=\"mb-3\" controlId={\"App-\" + i} >\n                    <Form.Label>Id</Form.Label>\n                    <Form.Control \n                        type=\"text\" \n                        defaultValue={sampleContext.sample.AADApps[i][\"Id\"]}\n                        onChange={handleChange(i)}\n                        disabled\n                        required\n                    />\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\" controlId={\"SettingKind-\" + i} >\n                    <Form.Label>Setting Kind</Form.Label>\n                    <Form.Control className=\"mx-2\" as=\"select\" size=\"lg\" onChange={handleChange(i)} custom>\n                        <option>JSON</option>\n                        <option>Text</option>\n                        <option>Replace</option>\n                    </Form.Control>\n                    <Form.Text className=\"text-muted\">\n                        Enter the kind of the setting file replace method.\n                    </Form.Text>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\" controlId={\"SettingFile-\" + i}>\n                    <Form.Label>Setting File</Form.Label>\n                    <Form.Control type=\"text\" placeholder=\"Enter the path\" onChange={handleChange(i)} required />\n                    <Form.Text className=\"text-muted\">\n                        Enter the path to the setting file, relative to the location of this file.\n                    </Form.Text>\n                </Form.Group>\n                { configs[i] && configs[i].Mappings.length > 0 ? configs[i].Mappings.map((mapping, index) => {\n                    return (\n                        <div iid={\"Mappings-\" + index} key={\"Mappings-\" + index}>\n                            <Form.Group className=\"mb-3\" controlId={\"Mappings-key\"}>\n                                <Form.Label>key</Form.Label>\n                                <Form.Control type=\"text\" placeholder=\"enter the key\" onChange={handleChange(i, index)} />\n                                <Form.Text className=\"text-muted\">\n                                    Enter a JSON key or text blob to replace.\n                                </Form.Text>\n                            </Form.Group>\n            \n                            <Form.Group className=\"mb-3\" controlId={\"Mappings-value\"}>\n                                <Form.Label>value</Form.Label>\n                                <Form.Control className=\"mx-2\" as=\"select\" size=\"lg\" onChange={handleChange(i, index)} custom>\n                                    <option>.AppId</option>\n                                    <option>.AppKey</option>\n                                    <option>.HomePage</option>\n                                    <option>.Scope</option>\n                                    <option>.ReplyUrls</option>\n                                    <option>$tenantId</option>\n                                    <option>$tenantName</option>\n                                </Form.Control>\n                                <Form.Text className=\"text-muted\">\n                                    Enter the kind of the setting file replace method.\n                                </Form.Text>\n                            </Form.Group>\n                        </div>\n                    );\n                }) : null }\n                <Button variant=\"primary\" onClick={() => addMappings(i)}>\n                    Add a mapping\n                </Button>\n                <hr />\n            </div>\n        );\n    }\n\n    return (\n        <>\n            <Form onSubmit={handleSubmit}>\n            {configForm}\n            {\n                configForm.length > 0 ?\n                    <Button variant=\"primary\" type=\"submit\">\n                        Finish\n                    </Button>\n                :\n                    null\n            }\n            </Form>\n        </>\n    );\n};","import { useContext, useEffect } from 'react';\nimport { Form, Button } from \"react-bootstrap\";\n\nimport { SampleContext } from '../App';\n\nexport const ReviewPanel = (props) => {\n\n    const sampleContext = useContext(SampleContext);\n\n    const validateFields = (sample) => {\n\n        const sanitizeFields = (object) => JSON.parse(JSON.stringify(object), (key, value) => {\n            if (value === null || value === \"\" || value === [] || value === {} || value === \"None\") return undefined;\n            if (value === \"true\") return true;\n            if (value === \"false\") return false;\n            return value;\n        });\n\n        const newSample = {\n            Sample: sanitizeFields(sample.Sample),\n            AADApps: sample.AADApps.map(app => sanitizeFields(app)),\n            CodeConfiguration: sample.CodeConfiguration.map(config => sanitizeFields(config)),\n        };\n\n        return newSample;\n    }\n    \n    useEffect(() => {\n        const validatedFields = validateFields(sampleContext.sample);\n        sampleContext.setSample(validatedFields);\n\n    }, []);\n\n    const printJson = (data) => (\n        <div id=\"review-panel\">\n            <pre>{JSON.stringify(data, null, 2)}</pre>\n        </div>\n    );\n\n    const resetForm = () => {\n        sampleContext.setSample({\n            Sample: {},\n            AADApps: [],\n            CodeConfiguration: [],\n        });\n\n        // move to the next form\n        props.handleNext(\"description\");\n    }\n\n    return (\n        <>\n            {printJson(sampleContext.sample)}\n            <Form>\n                <Button\n                    href={`data:text/json;charset=utf-8,${encodeURIComponent(\n                        JSON.stringify(sampleContext.sample, null, '\\t')\n                    )}`}\n                    download=\"sample.json\"\n                    variant=\"primary\" type=\"submit\"\n                >\n                    Download as JSON\n                </Button>\n                <Button onClick={resetForm}>\n                    Reset\n                </Button>\n            </Form>\n        </>\n    );\n};","import { useState } from 'react';\nimport { Tabs, Tab } from \"react-bootstrap\";\n\nimport { DescriptionForm } from './DescriptionForm';\nimport { ApplicationForm } from './ApplicationForm';\nimport { ConfigurationForm } from './ConfigurationForm';\nimport { ReviewPanel } from './ReviewPanel';\n\nexport const TabContainer = () => {\n\n    const [key, setKey] = useState('description');\n\n    return (\n        <div className=\"main-div\">\n            <Tabs\n                className=\"tab-area\"\n                variant=\"pills\"\n                id=\"controlled-tab-example\"\n                activeKey={key}\n                onSelect={(k) => setKey(k)}\n                transition={false}\n            >\n                <Tab className=\"tab-item\" eventKey=\"description\" title=\"Description\">\n                    <DescriptionForm handleNext={(k) => setKey(k)}/>\n                </Tab>\n                <Tab className=\"tab-item\" eventKey=\"apps\" title=\"Application(s)\">\n                    <ApplicationForm handleNext={(k) => setKey(k)}/>\n                </Tab>\n                <Tab className=\"tab-item\" eventKey=\"config\" title=\"Configuration\">\n                    <ConfigurationForm handleNext={(k) => setKey(k)}/>\n                </Tab>\n                { key === 'review' ?                 \n                <Tab className=\"tab-item\" eventKey=\"review\" title=\"Review\">\n                    <ReviewPanel handleNext={(k) => setKey(k)}/>\n                </Tab> \n                : \n                null }\n            </Tabs>\n        </div>\n    );\n};","import { createContext, useState } from 'react';\nimport { NavigationBar } from './components/NavigationBar';\nimport { TabContainer } from './components/TabContainer';\n\nimport './styles/App.css';\n\nexport const SampleContext = createContext();\n\nfunction App() {\n\n  /**\n   * Object matching to fields from the sample.json schema\n   */\n  const sampleObject = {\n    Sample: {},\n    AADApps: [],\n    CodeConfiguration: [],\n  };\n\n  const [sample, setSample] = useState(sampleObject);\n\n  const stateObject = {\n    sample,\n    setSample\n  };\n\n  return (\n    <SampleContext.Provider value={stateObject}>\n      <NavigationBar />\n      <TabContainer />\n    </SampleContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}